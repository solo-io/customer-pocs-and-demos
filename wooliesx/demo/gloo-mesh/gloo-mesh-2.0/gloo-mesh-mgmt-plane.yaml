# License for Gloo Mesh 
licenseKey: ${GLOO_MESH_GATEWAY_LICENSE_KEY}
# Name of the management cluster
mgmtClusterName: ${MGMT_MESH_NAME}
# Namespace to install Gloo Mesh Enterprise
adminNamespace: ""
# Set the logger to development mode, which can cause panics. Do not use in production.
devMode: false
# Set to true to permit unencrypted and unauthenticated communication between management plane and data planes. Do not use in production.
insecure: false
# Enable leader election for the HA deployment
leaderElection: true
# Debug mode. Do not use in production.
verbose: false

# Configuration for the gloo-mesh-mgmt-server deployment
glooMeshMgmtServer:
  enabled: true
  env:
  - name: POD_NAMESPACE
    valueFrom:
      fieldRef:
        fieldPath: metadata.namespace
  - name: LICENSE_KEY
    valueFrom:
      secretKeyRef:
        key: key
        name: gloo-mesh-enterprise-license
  # Required for OpenShift installations: Allow the pod to be assigned a dynamic user ID.
  floatingUserId: false
  # Image details
  image:
    pullPolicy: IfNotPresent
    registry: gcr.io/gloo-mesh
    repository: gloo-mesh-mgmt-server
  ports:
    # gloo-mesh-mgmt-server service port for Gloo Mesh agents to connect to
    grpc: 9900
    healthcheck: 8091
    # Port on which to serve internal Prometheus metrics for the management server app
    stats: 9091
  resources:
    requests:
      cpu: 125m
      memory: 256Mi
  # Static user ID to run the containers as. Unused if floatingUserId is 'true'
  runAsUser: 10101
  serviceType: LoadBalancer
  sidecars: {}
  # Concurrency to use for translation operations
  concurrency: 10
  # Maximum message size for gRPC messages sent and received by the management server
  maxGrpcMessageSize: "4294967295"
  # Confuguration for the relay server
  relay:
    disableCa: true
    disableCaCertGeneration: true
    disableTokenGeneration: false
    pushRbac: true
    signingTlsSecret:
      name: relay-tls-signing-secret
    tlsSecret:
      name: relay-server-tls-secret
    tokenSecret:
      key: token
      name: relay-identity-token-secret
      namespace: ""

# Configuration for the Gloo Mesh UI
glooMeshUi:
  enabled: true
  env:
  - name: POD_NAMESPACE
    valueFrom:
      fieldRef:
        fieldPath: metadata.namespace
  - name: LICENSE_KEY
    valueFrom:
      secretKeyRef:
        key: key
        name: gloo-mesh-enterprise-license
  # Required for OpenShift installations: Allow the pod to be assigned a dynamic user ID.
  floatingUserId: false
  # Image details
  image:
    pullPolicy: IfNotPresent
    registry: gcr.io/gloo-mesh
    repository: gloo-mesh-apiserver
  
  ports:
    console: 8090
    grpc: 10101
    healthcheck: 8081
  resources:
    requests:
      cpu: 125m
      memory: 256Mi
  runAsUser: 10101
  serviceType: ClusterIP
  sidecars:
    console:
      env: null
      image:
        pullPolicy: IfNotPresent
        registry: gcr.io/gloo-mesh
        repository: gloo-mesh-ui
      resources:
        requests:
          cpu: 125m
          memory: 256Mi
    envoy:
      env:
      - name: ENVOY_UID
        value: "0"
      image:
        pullPolicy: IfNotPresent
        registry: gcr.io/gloo-mesh
        repository: gloo-mesh-envoy
      resources:
        requests:
          cpu: 500m
          memory: 256Mi
  # OIDC authentication for the UI
  auth:
    backend: ""
    enabled: false
    oidc:
      appUrl: ""
      clientId: ""
      clientSecret: ""
      clientSecretName: ""
      issuerUrl: ""
      session:
        backend: ""
        redis:
          host: ""
  settingsName: settings

# Configuration for Redis instance
glooMeshRedis:
  enabled: true
  env:
  - name: MASTER
    value: "true"
  floatingUserId: false
  image:
    pullPolicy: IfNotPresent
    registry: docker.io
    repository: redis
    tag: 6.2.6
  ports:
    redis: 6379
  resources:
    requests:
      cpu: 125m
      memory: 256Mi
  runAsUser: 10101
  serviceType: ClusterIP
  sidecars: {}
  addr: ""

prometheus:
  alertmanager:
    enabled: false
  enabled: true
  kubeStateMetrics:
    enabled: false
  nodeExporter:
    enabled: false
  podSecurityPolicy:
    enabled: false
  pushgateway:
    enabled: false
  rbac:
    create: true
  server:
    fullnameOverride: prometheus-server
    persistentVolume:
      enabled: false
  serverFiles:
    prometheus.yml:
      scrape_configs:
      - job_name: gloo-mesh
        kubernetes_sd_configs:
        - role: endpoints
        relabel_configs:
        - action: keep
          regex: true
          source_labels:
          - __meta_kubernetes_pod_annotation_prometheus_io_scrape
        - action: keep
          regex: gloo-mesh-mgmt-server
          source_labels:
          - __meta_kubernetes_pod_label_app
        - action: keep
          regex: gloo-mesh-mgmt-server
          source_labels:
          - __meta_kubernetes_endpoints_name
        - action: replace
          regex: (.+)
          source_labels:
          - __meta_kubernetes_pod_annotation_prometheus_io_path
          target_label: __metrics_path__
        - action: replace
          regex: (.+):(?:\d+);(\d+)
          replacement: ${1}:${2}
          source_labels:
          - __address__
          - __meta_kubernetes_pod_annotation_prometheus_io_port
          target_label: __address__
        - action: labelmap
          regex: __meta_kubernetes_service_label_(.+)
        - action: replace
          source_labels:
          - __meta_kubernetes_namespace
          target_label: namespace
        - action: replace
          source_labels:
          - __meta_kubernetes_service_name
          target_label: service
        scrape_interval: 15s
        scrape_timeout: 10s
  serviceAccounts:
    alertmanager:
      create: false
    nodeExporter:
      create: false
    pushgateway:
      create: false
    server:
      create: true
prometheusUrl: http://prometheus-server